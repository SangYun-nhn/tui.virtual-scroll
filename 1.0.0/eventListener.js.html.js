tui.util.defineNamespace("fedoc.content", {});
fedoc.content["eventListener.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Event listener.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar bindHandlerMap = {};\n\n/**\n * Event listener.\n * @module eventListener\n */\nvar eventListener = {\n    /**\n     * Add event listener for IE.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler - callback function\n     * @param {?object} context - context for callback\n     * @private\n     */\n    _attachEvent: function(target, type, handler, context) {\n        var bindHandler;\n\n        if (context) {\n            bindHandler = tui.util.bind(handler, context);\n        } else {\n            bindHandler = handler;\n        }\n\n        bindHandlerMap[type + handler] = bindHandler;\n        target.attachEvent('on' + type, bindHandler);\n    },\n\n    /**\n     * Add event listener for other browsers.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler - handler\n     * @param {object} [context] - context for handler\n     * @private\n     */\n    _addEventListener: function(target, type, handler, context) {\n        var bindHandler;\n\n        if (context) {\n            bindHandler = tui.util.bind(handler, context);\n        } else {\n            bindHandler = handler;\n        }\n\n        bindHandlerMap[type + handler] = bindHandler;\n        target.addEventListener(type, bindHandler);\n    },\n\n    /**\n     * Bind DOM event.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler handler function\n     * @param {object} [context] - context for handler\n     * @private\n     */\n    _bindEvent: function(target, type, handler, context) {\n        var bindEvent;\n\n        if ('addEventListener' in target) {\n            bindEvent = this._addEventListener;\n        } else if ('attachEvent' in target) {\n            bindEvent = this._attachEvent;\n        }\n        eventListener._bindEvent = bindEvent;\n\n        bindEvent(target, type, handler, context);\n    },\n\n    /**\n     * Bind DOM events.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string | object} types - type or map of type and handler\n     * @param {function | object} [handler] - handler or context\n     * @param {object} [context] - context\n     */\n    on: function(target, types, handler, context) {\n        var handlerMap = {};\n        if (tui.util.isString(types)) {\n            handlerMap[types] = handler;\n        } else {\n            handlerMap = types;\n            context = handler;\n        }\n\n        tui.util.forEach(handlerMap, function(_handler, type) {\n            eventListener._bindEvent(target, type, _handler, context);\n        });\n    },\n\n    /**\n     * Remove event listener for IE.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler - handler\n     * @private\n     */\n    _detachEvent: function(target, type, handler) {\n        if (bindHandlerMap[type + handler]) {\n            target.detachEvent('on' + type, bindHandlerMap[type + handler]);\n            delete bindHandlerMap[type + handler];\n        }\n    },\n\n    /**\n     * Add event listener for other browsers.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler - handler\n     * @private\n     */\n    _removeEventListener: function(target, type, handler) {\n        target.removeEventListener(type, bindHandlerMap[type + handler]);\n        delete bindHandlerMap[type + handler];\n    },\n\n\n    /**\n     * Unbind DOM event.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string} type - event type\n     * @param {function} handler - handler\n     * @private\n     */\n    _unbindEvent: function(target, type, handler) {\n        var unbindEvent;\n        if ('removeEventListener' in target) {\n            unbindEvent = eventListener._removeEventListener;\n        } else if ('detachEvent' in target) {\n            unbindEvent = eventListener._detachEvent;\n        }\n        eventListener._unbindEvent = unbindEvent;\n\n        unbindEvent(target, type, handler);\n    },\n\n    /**\n     * Unbind DOM events.\n     * @memberOf module:eventListener\n     * @param {HTMLElement} target - target element\n     * @param {string | object} types - type or map of type and handler\n     * @param {function} [handler] - handler\n     */\n    off: function(target, types, handler) {\n        var handlerMap = {};\n        if (tui.util.isString(types)) {\n            handlerMap[types] = handler;\n        } else {\n            handlerMap = types;\n        }\n\n        tui.util.forEach(handlerMap, function(_handler, type) {\n            eventListener._unbindEvent(target, type, _handler);\n        });\n    }\n};\n\nmodule.exports = eventListener;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"